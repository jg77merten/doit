<?php

abstract class FinalView_Access_Handler_Abstract_Complex extends FinalView_Access_Handler_Abstract
{
    
    protected $_map = array();
    protected $_defaultHandlerName = null;
    
    public function runHandler()
    {
        $this->_map = $this->_getMapping();
        if (empty ($this->_map)) {
            throw new FinalView_Exception('Mapping is not set.');
        }
        
        $failedRules = $this->getResource()->getAccessRule()->getFailedRules();
        $failedRules = $this->_filterFailedRules($failedRules);
        
        
        $handlerName = $this->_getHandlerForFailedRules($failedRules);
        
        FinalView_Access_Handler::runHandler($handlerName, $this->getResource());
    }

    
    /**
     * Get handler name for this set of failed rules
     * 
     * @param array $failedRules
     * @return string
     */
    protected function _getHandlerForFailedRules(array $failedRules)
    {
        $failedRulesNames = array_keys($failedRules);

        foreach ($this->_map as $mapHandlerName => $mapFailedRulesNames) {
            if (count(array_diff($mapFailedRulesNames, $failedRulesNames)) == 0) {
                $handlerName = $mapHandlerName;
                break;
            }
        }
        if (!isset ($handlerName)) {
            $handlerName = $this->getDefaultHandler();
        }

        return $handlerName;
    }
    
    /**
     * Get default handler (if not set, used default access handler)
     * 
     * @return string name of default handler
     */
    public function getDefaultHandler()
    {
        if ($this->_defaultHandlerName === null) {
            $this->_defaultHandlerName = FinalView_Access_Handler::getDefaultHandler();
        }
        return $this->_defaultHandlerName;
    }
    
    /**
     * Set default handler
     * 
     * @param string $handlerName 
     */
    public function setDefaultHandler($handlerName)
    {
        $this->_defaultHandlerName = $handlerName;
    }

        

    /**
     * Implementatin of this function must return array with following structure:
     * array('handlerName' => array('failed_rule_1', 'failed_rule_2'))
     * It represents what handler need to run for each set of failed rules.
     * 
     * @return array
     */
    abstract protected function _getMapping();
    
    
    /**
     * Remove from array autogenerated rules and last expression rule (if any)
     * 
     * @param array $failedRules
     * @return array
     */
    protected function _filterFailedRules(array $failedRules)
    {
        if (empty ($failedRules)) {
            return array();
        }
        
        // remove last element from failed rules array if it is expression
        $lastRule = array_pop($failedRules);
        if (!($lastRule instanceof FinalView_Access_Rules)) {
            throw new FinalView_Exception('Not valid rule in failed rules array');
        }
        
        if (!$lastRule->isExpression()) {
            array_push($failedRules, $lastRule);
        }
        
        
        $filtered = array();
        foreach ($failedRules as $rule) {
            if (!($rule instanceof FinalView_Access_Rules)) {
                throw new FinalView_Exception('Not valid rule in failed rules array');
            }
            
            if (!$rule->isAutoBuiltRule()) {
                $filtered[$rule->getName()] = $rule;
            }
        }
        
        return $filtered;
    }

}